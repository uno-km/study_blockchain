// SPDX-License-Identifier: GPL-30
pragma solidity >= 0.7.0 < 0.9.0;
/*
    에러핸들러에 대해 공부 :
    에러핸들러는 총 4개가 있다.
    1. require
    2. revert
    3. assert
    4. try/catch
    
    개요 : 0.4.22~0.7.x 까지는 비슷했다가 0.8 버전이후로는 또 달라졌다.
    그래서 이런 의문이 들수 잇다. 그래서 0.8이 제일 최신인데 왜 0.7이하 버전을 배워야하는가?
    - 스마트컨트랙을 공부하거나 사용하다보면 이전 버전들의 라이브러리를 만저야하는데 
    그 라이브러리의 버전들이 버전들이 중구난방이라 두루두루 여러 버전을 알고있는것도 좋다.
    그래소ㅓ 0.8 버전은 이후에 배워보자.
    첫번째로 assert : 이 어설트는 가스를 다 소비하고 특정조건이 부합하지 않을떄/false일때 에러를 발생시킨다.
    두번째로 revert : 는 조건없이 에러를 발생시키고 가스를 환불시킨다.
    세번째 require : 특정한 조건에 부합하지 않으면(false)일때 에러를 발생시키고, 가스를 환불 시켜준다.
    이렇게 설명만 보면 이해가 안되닌까 어설트 부터 예제를 통해 배워보자
*/
contract ErrorHandler{
    function assertHandler() public pure{
        assert(false);
    }
    /*
        여기 assert()에 조건문을 써주면되는데 우선 간단하게 결과를 바로 받기위해 false를 썻다.
        이 false일때 에러가 발생하고, 가스가 환불이 안된다. 
        우선 결과를 보니 gas가 3000000 이정도 소비가 되었고 환불을 받지 않았다. 
        아직 이 값이 얼마나 큰지 또는 와닿는지는 모른다. 
    */    
    //2. revert 함수
    function revertHandler() public pure{
        revert("revert!");
    }
    /*
        이 리버트는 조건에 상관없이 에러가 나타나게 하는데 
        이 리버트의 좋은점은 에러메세지를 revert() 에 입력해주면 해당 메세지가 나온다.
        아까 어설트 핸들러를 사용하면 3000000가스를 소비했지만 리버트 함수를 쓰면 21322  가스만 소비된것으로 나타난다.
        거의 10배나 차이가 난다. 리버트의 경우 에러가 발생하면 가스를 환불해서 일부분만 소비한것처럼 보이게된다.
        쉽게 말해서 우리가 함수를 사용할때 함수에 대한 가스를 지불하는데 어설트를 썻을때 가스비용을 다지불하고
        에러가 났어도 가스비용을 환불을 받지 못한다.
        그런데 리버트는 예상가스비용을 지불하고 , 리벌트가 걸려서 에러가 나면, 리버트가 소비한 가스만 지불하고 나머지에
        대한 가격은 환불을 받는다. 
        그렇기 때문에 비용절감이 되는것을 알 수 있다.
        그럼 가스를 소비하는 어설트의 경우 효율적이지 못할것이다. 그래서 그 어설트는 테스트용으로 사용한다.
        테스트란 ? 우리가 스마트컨트랙트를 만들어놓고 이 스마트컨트랙트가 잘 돌아가는지 이 트러플내에서 확인하기위해
        사용하긴한다. 
        그리고 이 리버트나 리콰이어 같은경우 실제 스마트컨트랙트를 작성할때 조건같은걸 체크하고 에러를 처리할때 완전
        프로그래밍을할때 리버트를 사용한다.
        리버트는 조건도 없이 에러가 나니까 실용적이진 못하다.
    */
    function requireHandler()public pure{
        require(false,"occurred");
    }
    /*
        리콰이어를 써주고 그 안에 조건문을 써줬다 그리고 리버트와 마찬가지로 에러 메세지를 넣어주었다.
        당연히 false라 에러가 날것이다. 보면 여기 메세지도 나왔다.
        그리고 가스도 21316  만큼 소비했다고 나온다. 어떻게 보면 revert와 가스소비량은 별반 차이가 없었다.
    */
    //이제 이것들을 응용해서 이것저것 해보자
    function onlyAdult(uint256 age) public pure returns(string memory){
        if(age<19){
            revert("Youn are not allowd to pay for the cigarette");
        }
        return "Your payment is succeded";
    }
    /*
        이 함수는 나이를 체크하고 조건이 부합하지않으면 메세지를출력하는것이다.
        해당 조건에 따라서 리턴값 또는 에러가 나오게 한다.
        리버트를 한다면 무조건적으로 나는데 if를 써주면 덜나게 된다.
        그리고 require는 위의 함수를 하나로 합친것이다.
    */
    function onlyAdult2(uint256 age) public pure returns(string memory){
        require(age>19,"You are not allowd to pay for the cigarette");
        return "Your payment is succeded";
    } 
    /*
        위 처럼 한줄로 줄일 수 있다.
        잘넣으면 값을 리턴받고 만약 13으로 조건문에 부합하지 않는 숫자를 입력하면 해당 오류 메세지를 받는다.
        여기서 주의할 점은 : revert함수 내부의 if의 경우는 true일때 if문이 발동한다.
        require의 경우는 false일때 실행한다. 
    */
}